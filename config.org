* Terminal 
** Setting default shell to bash

#+BEGIN_SRC emacs-lisp
  (defvar my-term-shell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list my-term-shell)))
  (ad-activate 'ansi-term)
#+END_SRC

** Set global key for terminal C-S-return
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<C-S-return>") 'ansi-term)
#+END_SRC

* Org
** basic config
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
** Org bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
* Misc. changes
** No backup file
#+BEGIN_SRC emacs-lisp
(setq make-backup-file nil)
#+END_SRC

** Auto save off
#+BEGIN_SRC emacs-lisp  
(setq auto-save-default nil)
#+END_SRC

** Y or N
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** Scroll conservatively 
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

** No bell
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

** Highlight line
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))
#+END_SRC

** No startup message
#+BEGIN_SRC emacs-lisp
(setq inhibit-startup-message t)
#+END_SRC

** UI elements
#+BEGIN_SRC emacs-lisp
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC

** electric pairs
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      (?\" . ?\")
			      (?\' . ?\')
			      ))

  (electric-pair-mode t)
#+END_SRC
** all-the-icons
   #+BEGIN_SRC emacs-lisp
     (use-package all-the-icons :ensure t)
   #+END_SRC
** matching parens
#+BEGIN_SRC emacs-lisp
  (setq show-paren-delay 0)
  (show-paren-mode 1)
#+END_SRC
* Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
* Which-key
#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :init (which-key-mode))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package doom-modeline
    :ensure t
    :hook (after-init . doom-modeline-mode))
#+END_SRC

* Relative line numbers
#+BEGIN_SRC emacs-lisp
  (use-package linum-relative
    :ensure t
    :init (linum-relative-global-mode 1))

#+END_SRC
* IDO
** enable ido mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq iso-everywhere t)
  (ido-mode 1)
#+END_SRC

** ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
  (setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC

** smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** switch-buffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
* Buffers
** enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** always kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
** kill all buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    mapc 'kill-buffer (buffer-list))
  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
* Avy
 #+BEGIN_SRC emacs-lisp
     (use-package avy
       :ensure t)
   (global-set-key (kbd "M-w") 'avy-goto-word-1)
   (global-set-key (kbd "M-s") 'avy-goto-char-2)
 #+END_SRC
* Config edit/reload
** edit
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org"))
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** reload
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org")))
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
* Splitting windows
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)

  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
* Switch window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
      (setq switch-window-input-style 'minibuffer)
      (setq switch-window-increase 4)
      (setq switch-window-threshold 2)
      (setq switch-window-shortcut-style 'qwerty)
      (setq switch-window-qwerty-shortcuts
	  '("q" "w" "e" "r" "a" "s" "d" "f")) 
    :bind
     ([remap other-window] . switch-window))
#+END_SRC
* Evil
** evil
#+BEGIN_SRC emacs-lisp
  (use-package evil
    :ensure t
    :config
    (evil-mode 1))
#+END_SRC
** evil leader
#+BEGIN_SRC emacs-lisp
  (use-package evil-leader
    :ensure t
    :config
    (global-evil-leader-mode))
#+END_SRC
** evil-surround 
#+BEGIN_SRC emacs-lisp
  (use-package evil-surround
    :ensure t
    :config
    (global-evil-surround-mode))
#+END_SRC
** evil indent
#+BEGIN_SRC emacs-lisp
  (use-package evil-indent-textobject
    :ensure t)
#+END_SRC
** C-u
#+BEGIN_SRC emacs-lisp
  (define-key evil-normal-state-map (kbd "C-u") 'evil-scroll-up)
#+END_SRC
** C-d
   #+BEGIN_SRC emacs-lisp
   (define-key evil-normal-state-map (kbd "C-d") 'evil-scroll-down)
   #+END_SRC
** neotree keybinds
   #+BEGIN_SRC emacs-lisp
     (evil-define-key 'normal neotree-mode-map (kbd "TAB") 'neotree-enter)
     (evil-define-key 'normal neotree-mode-map (kbd "SPC") 'neotree-quick-look)
     (evil-define-key 'normal neotree-mode-map (kbd "q") 'neotree-hide)
     (evil-define-key 'normal neotree-mode-map (kbd "RET") 'neotree-enter)
     (evil-define-key 'normal neotree-mode-map (kbd "g") 'neotree-refresh)
     (evil-define-key 'normal neotree-mode-map (kbd "n") 'neotree-next-line)
     (evil-define-key 'normal neotree-mode-map (kbd "p") 'neotree-previous-line)
     (evil-define-key 'normal neotree-mode-map (kbd "A") 'neotree-stretch-toggle)
     (evil-define-key 'normal neotree-mode-map (kbd "H") 'neotree-hidden-file-toggle)
   #+END_SRC
* Rainbow
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (rainbow-delimiters-mode 1))
#+END_SRC
* Paredit
  #+BEGIN_SRC emacs-lisp
    (use-package paredit-everywhere
      :ensure t)
  #+END_SRC
* Dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-startup-banner "~/.emacs.d/img/gnu.png")
    (setq dashboard-items '((recents . 10))))

#+END_SRC
* Autocompletion
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))

  (setq company-idle-delay .2)
  (setq company-minimum-prefix-length 3)
  (setq company-selection-wrap-around t)
  (company-tng-configure-default)
#+END_SRC
** C
   #+BEGIN_SRC emacs-lisp
     (use-package company-irony
       :ensure t
       :config
       (require 'company)
       (add-to-list 'company-backends 'company-irony))

     (use-package irony
       :ensure t
       :config
       (add-hook 'c-mode-hook 'irony-mode)
       (add-hook 'irony-mode 'irony-cdb-autosetup-compile-options))

     (with-eval-after-load 'company
       (add-hook 'c-mode-hook 'company-mode))
   #+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-hook 'yas-minor-mode)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck-clang-analyzer
    :ensure t
    :config
    (with-eval-after-load 'flycheck
      (require 'flycheck-clang-analyzer)
       (flycheck-clang-analyzer-setup)))
#+END_SRC
* Markdown
#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :commands (markdown-mode gfm-mode)
    :mode (("README\\.md\\'" . gfm-mode)
	   ("\\.md\\'" . markdown-mode)
	   ("\\markdown\\'" . markdown-mode))
    :init (setq markdown-command "multimarkdown"))
#+END_SRC
* Flycheck
#+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :ensure t
    :init (global-flycheck-mode t))
#+END_SRC
* Yasnippet
#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (use-package yasnippet-snippets
      :ensure t)
    (yas-reload-all))
#+END_SRC
* Neotree
#+BEGIN_SRC emacs-lisp
  (use-package neotree
    :ensure t
    :init
    (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))
#+END_SRC
** neotree toggle 
   #+BEGIN_SRC emacs-lisp
     (global-set-key (kbd "C-c t") 'neotree-toggle)
   #+END_SRC
* Slime 
  #+BEGIN_SRC emacs-lisp
	(use-package slime
	  :ensure t
	  :config
	  (setq inferior-lisp-program "/usr/bin/sbcl")
	  (setq slime-contribs '(slime-fancy)))

    (use-package slime-company
	 :ensure t
	 :init
	 (require 'company)
	 (slime-setup '(slime-fancy slime-company)))
  #+END_SRC
** company sly
  #+BEGIN_SRC emacs-lisp
      (use-package sly-company
	:defer t
	:init
	       (add-hook 'sly-mode-hook #'sly-company-mode))
  #+END_SRC
  
* Clojure
** clojure mode
   #+BEGIN_SRC emacs-lisp
  (use-package clojure-mode
    :ensure t)
   #+END_SRC
** cider
   #+BEGIN_SRC emacs-lisp
     (use-package cider
       :ensure t)
   #+END_SRC
* Notes file
   #+BEGIN_SRC emacs-lisp
     (defun notes-visit ()
       (interactive)
       (find-file "~/.emacs.d/notepad.org"))
     (global-set-key (kbd "C-c n o") 'notes-visit)
   #+END_SRC
* Python
  #+BEGIN_SRC emacs-lisp
    ;;(use-package jedi
      ;;:ensure t)
     ;;(add-hook 'python-mode-hook 'jedi:setup)
    ;;(setq jedi:complete-on-dot t)

    ;;(use-package company-jedi             ;;; company-mode completion back-end for Python JEDI
    ;;  :config
    ;;  (setq jedi:environment-virtualenv (list (expand-file-name "~/.emacs.d/.python-environments/")))
    ;;  (add-hook 'python-mode-hook 'jedi:setup)
    ;;  (setq jedi:complete-on-dot t)
    ;;  (setq jedi:use-shortcuts t)
    ;;  (defun config/enable-company-jedi ()
    ;;    (add-to-list 'company-backends 'company-jedi))
    ;;  (add-hook 'python-mode-hook 'config/enable-company-jedi))


    (with-eval-after-load 'company
	(add-hook 'python-mode-hook 'company-mode))

    (use-package company-jedi
      :ensure t
      :config
	(require 'company)
	(add-to-list 'company-backends 'company-jedi))

    (defun python-mode-company-init ()
      (setq-local company-backends '((company-jedi
				      company-etags
				      company-dabbrev-code))))

    (use-package company-jedi
      :ensure t
      :config
	(require 'company)
	(add-hook 'python-mode-hook 'python-mode-company-init))
  #+END_SRC
** yasnippet
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'yas-minor-mode)
#+END_SRC
** flycheck
#+BEGIN_SRC emacs-lisp
  (add-hook 'python-mode-hook 'flycheck-mode)
#+END_SRC
* Undo tree
#+BEGIN_SRC emacs-lisp
  (use-package undo-tree
    :ensure t
    :demand t
    :config
    (global-undo-tree-mode 1))
#+END_SRC
* Swiper
#+BEGIN_SRC emacs-lisp
    (use-package swiper
      :ensure t
      :bind ("C-s" . 'swiper))
#+END_SRC
